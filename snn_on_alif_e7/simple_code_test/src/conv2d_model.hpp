
//#include "BufAttributes.hpp"

#include <cstddef>
#include <cstdint>



static const uint8_t cms_conv2d[] __attribute__((aligned(16))) =
    {
        0x43, 0x4f, 0x50, 0x31, 0x01, 0x00, 0x10, 0x00, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x4a, 0x00, 
        0x0f, 0x01, 0x01, 0x00,     // cmd0.NPU_SET_IFM_REGION 1
        0x00, 0x40, 0x00, 0x00,     //cmd1.NPU_SET_IFM_BASE0 
        0x00, 0x04, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x07, 0x00, 0x0c, 0x01, 0x07, 0x00, 0x0a, 0x01, 0x07, 0x00, 0x04, 0x01, 0x0f, 0x00, 0x06, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x05, 0x40, 0x00, 0x00, 
        0x80, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        
        0x09, 0x01, 0x80, 0xff,     //cmd0.NPU_SET_IFM_ZERO_POINT
        
        0x05, 0x01, 0x41, 0x00, 0x07, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 
        0x03, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00,

        0x1f, 0x01, 0x01, 0x00,     //cmd0.NPU_SET_OFM_REGION 1
        
        0x10, 0x40, 0x00, 0x00,     //cmd1.NPU_SET_OFM_BASE0
        0x00, 0x00, 0x00, 0x00,     //  payload: 0x0 (0)
        0x11, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x40, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x13, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x03, 0x00, 0x1c, 0x01, 0x03, 0x00, 0x1a, 0x01, 0x03, 0x00, 0x12, 0x01, 0x03, 0x00, 0x11, 0x01, 0x03, 0x00, 
        0x13, 0x01, 0x0f, 0x00, 0x16, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x15, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x18, 0x01, 0x18, 0x00,     //cmd0.NPU_SET_OFM_ZERO_POINT   0x18 (since signed in set OFM precision --> 24)
        0x14, 0x01, 0x41, 0x00,     //cmd0.NPU_SET_OFM_PRECISION    0x0041 = 0b 0000 0000 0100 0001
                                        // ?b[15:14] = 00    --> double rounding
                                        // ?b[8]     = 0     --> per channel scale
                                        // ?b[7:6]   = 01    --> OFM format: NHCWB16
                                        // ?b[2:1]   = 00    --> Activation precision: 8 bit
                                        // ?b[0]     = 1     --> Activation type: Signed

        
        0x21, 0x01, 0x01, 0x00, 0x20, 0x01, 0x01, 0x00, 0x22, 0x01, 0x07, 0x00,
        
        
        0x28, 0x01, 0x01, 0x00,     //cmd0.NPU_SET_WEIGHT_REGION 1
        0x20, 0x40, 0x00, 0x00,     //cmd1.NPU_SET_WEIGHT_BASE
        
        0xa0, 0x08, 0x00, 0x00,   //payload: 0x8a0
        0x21, 0x40, 0x00, 0x00,     //cmd1.NPU_SET_WEIGHT_LENGTH 0
        0x10, 0x04, 0x00, 0x00,     //payload: 0x410 (1040)
        0x29, 0x01, 0x01, 0x00, 0x22, 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x23, 0x40, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
        0x25, 0x01, 0x00, 0x00,     //cmd0.NPU_SET_ACTIVATION   0
        0x26, 0x01, 0x80, 0xff,   //cmd0.NPU_SET_ACTIVATION_MIN   65408 (-128?)
        
        0x27, 0x01, 0x7f, 0x00,     //cmd0.NPU_SET_ACTIVATION_MAX   127
        0x16, 0x01, 0x03, 0x00, 0x15, 0x01, 0x03, 0x00, 0x17, 0x01, 0x0f, 0x00, 0x0d, 0x01, 0x0a, 0x00, 0x2d, 0x01, 0x1e, 0x00, 0x24, 0x01, 0x00, 0x00, 0x2f, 0x01, 0x00, 0x00, 
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff };
        


//static const uint8_t weights_conv2d [1360] __attribute__((aligned(16))) = 
//{
//    0
//};

// All zeros, encoded to 352
static const uint8_t weights_conv2d [352] __attribute__((aligned(16))) = 
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 
0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 
0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x6e, 0x40, 0x40, 0x1f, 0x03, 0x00, 0x40, 0x00, 0x10, 0x00, 0xfe, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};




  const uint8_t * GetConv2DPointer()
  {
      return cms_conv2d;
  }
  
  size_t GetConv2DLen()
  {
      return sizeof(cms_conv2d);
  }


  const uint8_t * GetConv2DWeightsPointer()
  {
      return weights_conv2d;
  }
  
  size_t GetConv2DWeightsLen()
  {
      return sizeof(weights_conv2d);
  }